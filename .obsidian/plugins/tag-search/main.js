/*
THIS IS A GENERATED/BUNDLED FILE BY ESBUILD
if you want to view the source, please visit the github repository of this plugin
*/

var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// main.ts
var main_exports = {};
__export(main_exports, {
  default: () => TagSearchPlugin
});
module.exports = __toCommonJS(main_exports);
var import_obsidian = require("obsidian");
var TagSearchPlugin = class extends import_obsidian.Plugin {
  async onload() {
    this.addCommand({
      id: "open-tag-search",
      name: "Open tag search",
      callback: () => {
        const searchPlugin = this.app.internalPlugins.getPluginById("global-search");
        const search = searchPlugin && searchPlugin.instance;
        if (searchPlugin && searchPlugin.instance) {
          new TagSearchModal(this.app, search).open();
        } else {
          new import_obsidian.Notice("Please enable the search core plugin!");
        }
      }
    });
  }
  onunload() {
  }
};
var TagSearchModal = class extends import_obsidian.FuzzySuggestModal {
  constructor(app2, search) {
    super(app2);
    this.app = app2;
    this.search = search;
    this.search = search;
  }
  onOpen() {
    super.onOpen();
    this.inputEl.addEventListener("keydown", (ev) => {
      this.maybeChooseFirstSuggestion(ev);
    });
  }
  onClose() {
    super.onClose();
    this.inputEl.removeEventListener("keydown", (ev) => {
    });
  }
  getItems() {
    var _a;
    const files = app.vault.getMarkdownFiles();
    const itemSet = /* @__PURE__ */ new Set();
    for (const file of files) {
      const cache = app.metadataCache.getCache(file.path);
      if (cache === null) {
        continue;
      }
      (_a = (0, import_obsidian.getAllTags)(cache)) == null ? void 0 : _a.forEach((tag) => {
        itemSet.add(tag);
      });
    }
    return Array.from(itemSet);
  }
  getItemText(item) {
    return item;
  }
  onChooseItem(item, evt) {
    const toggle = evt.ctrlKey || evt.metaKey;
    const negate = evt.shiftKey;
    const defaultTagSearchString = `tag:${item}`;
    const negatedTagSearchString = `-tag:${item}`;
    const tagSearchString = negate ? negatedTagSearchString : defaultTagSearchString;
    if (toggle) {
      let query = this.search.getGlobalSearchQuery();
      let needsNewTagSearchString = false;
      if (negate && !query.includes(negatedTagSearchString)) {
        needsNewTagSearchString = true;
      }
      query = query.replaceAll(negatedTagSearchString, "");
      if (!negate && !query.includes(defaultTagSearchString)) {
        needsNewTagSearchString = true;
      }
      query = query.replaceAll(defaultTagSearchString, "");
      if (needsNewTagSearchString) {
        this.search.openGlobalSearch(query.concat(query.length === 0 ? "" : " ", tagSearchString));
      } else {
        this.search.openGlobalSearch(query);
      }
    } else {
      this.search.openGlobalSearch(tagSearchString);
    }
  }
  maybeChooseFirstSuggestion(evt) {
    var _a, _b;
    const toggle = evt.ctrlKey || evt.metaKey;
    const negate = evt.shiftKey;
    if (evt.key === "Enter" && (toggle || negate)) {
      const choice = (_b = (_a = this.resultContainerEl.getElementsByClassName("is-selected").item(0)) == null ? void 0 : _a.textContent) != null ? _b : null;
      if (choice != null) {
        this.close();
        this.onChooseItem(choice, evt);
      }
    }
  }
};
