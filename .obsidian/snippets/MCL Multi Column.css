/* === README ===
	Updated: 2022-04-24 (version: 0.0.8)
	- version 0.1.0 for list-based, 0.0.8 for callout based
	Author: Faiz Khuzaimah (@faizkhuzaimah)
	
	What is this snippet for?
	- to allow Obsidian users to change the layout with preset css by just specifying
	  the cssClass in the frontmatter (YAML) or naming the Callout block
	- available cssClass
		- cssClass: two-column-list
		- cssClass: {.two-column-list-block}
		- cssClass: three-column-list
		- cssClass: {.three-column-list-block}
		- cssClass: multi-column-list
	- available Callout format
		- [!multi-column]
		- [!blank-container]
		
	Compatibility
	- tested to work fine with the following Community Theme
		- Default Theme
		- Big Sur / Blue Topaz / California Cost / Notation / Pisum / Prism / Things / Typewriter (with minor issue on title color)
	- known to be not working
		- Primary (due to the theme heaving theming, box-shadow and so on)
	
	Credits
	- Kevin Powell Youtube channel
	- https://css-tricks.com/
	- discord OMG members @Cáo thoát tục (Cáo thoát tục#6993), @mulfok (mulfok#6931) and @Rainbell (Rainbell#3617)
*/

/* @settings

name: Modular CSS Layout - Multi Column
id: modular-css-layout-mc
settings:

    - 
        id: multi-column-title
        title: Callout Column Settings
        type: heading
        level: 2
		collapsed: true
    - 
        id: callout-min-width
        title: Minimum Sub-Callout Width
        description: for sub-callout in [!multi-column]. in px units
        type: variable-number-slider
        default: 200
        min: 100
        max: 500
        step: 50
		format: px
    - 
        id: callout-gap
        title: Sub-Callout Gap (any unit)
        description: NO spacing between figure and unit
        type: variable-text
        default: 0.5rem
    - 
        id: float-small-width
        title: Floating Callout Width - Small (in px)
        type: variable-number-slider
        default: 300
        min: 200
        max: 450
        step: 50
		format: px
    - 
        id: float-medium-width
        title: Floating Callout Width - Medium (in px)
        type: variable-number-slider
        default: 400
        min: 300
        max: 550
        step: 50
		format: px
    - 
        id: float-large-width
        title: Floating Callout Width - Large (in px)
        type: variable-number-slider
        default: 600
        min: 500
        max: 750
        step: 50
		format: px

    - 
        id: mc-list-title
        title: List Column Settings
        type: heading
        level: 2
		collapsed: true
    - 
        id: list-min-width
        title: Minimum Column Width (in px)
        type: variable-number-slider
        default: 200
        min: 100
        max: 500
        step: 50
		format: px
    - 
        id: col-rule-color
        title: Column Ruler Color
        type: variable-color
        format: hsl-split
        default: '#b3b3b3'
    - 
        id: col-rule-width
        title: Column Ruler Width (in px)
        type: variable-number-slider
        default: 1
        min: 0
        max: 4
        step: 1
		format: px

*/

body{
	--callout-min-width: 200px;
	--callout-gap: 0.5rem;
	--list-min-width: 200px;
	--col-rule-color: #b3b3b3;
	--col-rule-width: 1px;
	--float-small-width: 300px;
	--float-medium-width: 400px;
	--float-large-width: 600px;
}


/* === Multi Column "DIV"'s Using Callout === */
	/* - Main multi-column snippet using Callout */

	/* the main placeholder, hide everything */
	div[data-callout="multi-column"].callout { background: unset; border: unset; margin: unset; padding: unset; clear: both; }
	div[data-callout="multi-column"].callout > .callout-title { display: none; }
	/* make main placeholder callout-content a flex */
	div[data-callout="multi-column"].callout > .callout-content { display: flex; flex-wrap: wrap; padding: 0; gap: var(--callout-gap);}

	/* this is a workaround, need to figure out how to solve div height issue, and primary box-shadow */
	div[data-callout="multi-column"].callout > .callout-content .callout-content { border: unset; background: unset; box-shadow: unset; }
	div[data-callout="multi-column"].callout > .callout-content > *:is(div,ul) { flex: 1 1 var(--callout-min-width); margin: 0;}
	
	/* 	some issues still persists
		(1) some theme has background-color color set for `.callout > .callout-content` and none for `.callout > .callout-content > .callout`
		(2) some theme uses transparency to affect .callout-title
	*/

	
	@media (min-width: 500px) {
		/* .is-collapsed is used to draw the border-left only when it's collapsed */
		div[data-callout="multi-column"].callout > div.callout-content .callout.is-collapsed { background-color: unset; border: unset; box-shadow: unset;}
		div[data-callout="multi-column"].callout > div.callout-content .callout.is-collapsed .callout-title { border-left: 4px solid rgba(var(--callout-color)); border-top-left-radius: 3px;}
	}


	/* - Blank Container "DIV"'s - can be used with Main Multi-Column layout above */
	div[data-callout="blank-container"].callout,
	div[data-callout="blank-container"].callout > .callout-content { border: 0 !important; padding-top: 0; padding-inline: 5px; background: unset !important; box-shadow: unset; }
	div[data-callout="blank-container"].callout > .callout-title { display: none; }

	/* testing for another */
	div[data-callout="multi-column-flex-height"].callout { background: unset; border: unset; margin: unset; padding: unset; }
	div[data-callout="multi-column-flex-height"].callout > .callout-title { display: none; }
	
	div[data-callout="multi-column-flex-height"].callout > .callout-content { display: flex; flex-wrap: wrap; padding: 0; gap: 0.5rem;}
	div[data-callout="multi-column-flex-height"].callout > .callout-content .callout {flex: 1 1 var(--callout-min-width); margin: 0; background: unset; border-left: unset;}
	/* need to reintroduce border-left as original callout put border on the parent callout */
	div[data-callout="multi-column-flex-height"].callout > .callout-content .callout .callout-title { border-left: 4px solid rgba(var(--callout-color)); border-top-left-radius: 3px;}
	div[data-callout="multi-column-flex-height"].callout > .callout-content .callout .callout-content { margin: 0; border-left: 4px solid rgba(var(--callout-color)); border-bottom-left-radius: 3px; background-color: var(--background-secondary);}


	/* no margin */
	.markdown-reading-view div[data-callout-metadata*="no-margin"].callout.callout {margin: 0;}


	/* text justify */
	.text-justify :is(.markdown-preview-view p,.markdown-source-view .cm-line) {
		text-align: justify;
	}


/* === Floating Callout === */
	@media (min-width: 500px){	
		.markdown-reading-view div[data-callout-metadata|="left"].callout {float: left; margin-right: 20px; }
		.markdown-reading-view div[data-callout-metadata|="right"].callout {float: right; margin-left: 20px; }
		div[data-callout^="blank-container"].callout:is(div[data-callout-metadata|="left"], div[data-callout-metadata|="right"]) {margin-top: 0;}
		div[data-callout-metadata*="-small"].callout {width: var(--float-small-width);}
		div[data-callout-metadata*="-medium"].callout {width: var(--float-medium-width);}
	}
	@media (min-width: 750px){	
		div[data-callout-metadata$="large"].callout {width: var(--float-large-width);}
	}
	.embedded-backlinks, .markdown-preview-view h2 { clear: both; }

/* === Multi Column Lists === */

	/* - xx-column-list for first level only list, but apply anywhere */
	/* - xx-column-list-block apply at block level - but require JV's Markdown Attributes plugin */
	
	@media (min-width: 500px ){
		.two-column-list div > ul,
		.two-column-list-block {columns: 2; column-gap: 3rem;}
		.three-column-list div > ul,
		.three-column-list-block {columns: 3; column-gap: 3rem;} 
	}
	

	/* - dashboard style, page level only, apply to any first level */
	/* -- applicable only when width > 400pt, else just single column */
	/* grid list block level cannot be done, it breaks formatting */
	@media (min-width: 500px)
		{ .two-column-grid-list div > ul { display: grid; grid-column-gap:3em; grid-template-columns:repeat(2,1fr);} }
	@media (min-width: 600px){
		.three-column-grid-list div > ul
			{ display: grid; grid-column-gap:3em; grid-template-columns:repeat(3,1fr);}
	}
	
	.multi-column-list div > ul,
	.multi-column-list-block {
		column-width: var(--list-min-width); column-gap: 3rem; column-rule: var(--col-rule-width) solid var(--col-rule-color);
	}
